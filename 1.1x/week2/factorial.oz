% Факториал через рекурсию:
% 0! = 1
% n! = n * (n - 1)! when n > 0
declare
fun {Fact1 N}
   if N==0 then 1
   else N * {Fact1 N-1} end % Здесь нужно хранить вычисление {Fact1 N-1}, чтоб потом умножить
   % Это не хвостовая рекурсия, потому что рекурсивный вызов функции — не последняя вычислительная
   % операция.
end

{Browse {Fact1 10}}

% Факториал через принцип сообщающихся сосудов:
% n! = i! * a, где i == n, a == 1, формула true
%    = i * (i - 1)! * a, тут формула тоже верная: i == n, a == 1
%    = (i - 1)! * (i * a), а это самый ништяк: значение i перетекает в a и формула по прежнему верная
% We have: i' = i - 1 and a' = i * a (i' и a' пойдут в рекурсивный вызов)
declare
fun {Fact2 I A}
   if I==0 then A
   else {Fact2 I-1 I*A} end % Тут Fact2 вызывается в самую последню очередь. Нигде ничего не надо хранить.
   % Это — хвостовая рекурсия. Тут рекурсивный вызов функции происходит в самую последнюю очередь.
end

{Browse {Fact2 10 1}}